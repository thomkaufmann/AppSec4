    1: from flask import Flask, flash, session, render_template, redirect, url_for, request
    1: import sqlite3 as sql
    1: import subprocess, random
    1: import os, datetime
    1: from subprocess import check_output
    1: from werkzeug.security import generate_password_hash, check_password_hash
    1: from flask_wtf import FlaskForm
    1: from wtforms import StringField, PasswordField, SubmitField, TextAreaField, IntegerField
    1: from wtforms.validators import InputRequired, Regexp, Length, NumberRange, Optional
    1: from flask_sqlalchemy import SQLAlchemy
    1: from sqlalchemy import UniqueConstraint, ForeignKey
       
    1: sql.connect("database.db")
    1: project_dir = os.path.dirname(os.path.abspath(__file__))
    1: database_file = "sqlite:///{}".format(os.path.join(project_dir, "database.db"))
       
    1: app = Flask(__name__)
       
    1: app.config.update(
    1:    SESSION_COOKIE_SECURE=False, # should be set to true upon adding SSL
    1:    SESSION_COOKIE_HTTPONLY=True,
    1:    SESSION_COOKIE_SAMESITE='Strict',
    1:    TESTING=True,
    1:    SECRET_KEY=os.urandom(16),
    1:    SQLALCHEMY_DATABASE_URI = database_file,
    1:    SQLALCHEMY_TRACK_MODIFICATIONS = False
       )
    1: db = SQLAlchemy(app)
       
    2: class User(db.Model):
    1:    id = db.Column('id', db.Integer, primary_key = True)
    1:    username = db.Column(db.String(50), unique = True)
    1:    password = db.Column(db.String(100))  
    1:    pin = db.Column(db.Integer)
    1:    admin = db.Column(db.Boolean, default = False, nullable = False)
       
    1:    def __init__(self, username, password, pin, admin):
             self.username = username
             self.password = generate_password_hash(password)
             self.pin = pin 
             self.admin = admin
       
    2: class Submission(db.Model):
    1:    id = db.Column('id', db.Integer, primary_key = True)
    1:    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable = False)
    1:    text = db.Column(db.String(500))
    1:    result = db.Column(db.String(500))
       
    1:    def __init__(self, user_id, text, result):
             self.user_id = user_id
             self.text = text
             self.result = result 
       
    2: class Log(db.Model):
    1:    id = db.Column('id', db.Integer, primary_key = True)
    1:    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable = False)
    1:    login = db.Column(db.DateTime)
    1:    logout = db.Column(db.DateTime)
       
    1:    def __init__(self, user_id, login, logout):
             self.user_id = user_id
             self.login = login
             self.logout = logout 
       
    1: db.create_all()
    1: admin = User.query.filter_by(username='admin').first()
    1: if admin is None:
          db.session.add(User('admin','Administrator@1',12345678901,True))
          db.session.commit()
          
    1: @app.after_request
       def set_headers(response):
          response.headers['Content-Security-Policy'] = "default-src 'self'"
          response.headers["X-Frame-Options"] = "SAMEORIGIN"
          response.headers['X-Content-Type-Options'] = 'nosniff'
          response.headers['X-XSS-Protection'] = '1; mode=block'      
          return response
       
    1: @app.route("/")
       def index():
          #if logged in, send to spell check form, otherwise send to login
          if 'user_id' in session: 
             return redirect(url_for('spell_check'))
          
          return redirect(url_for('login'))
       
    1: @app.route('/login_history', methods = ['POST', 'GET'])
       def login_history():
          if 'user_id' in session:
             form = LoginHistoryForm()
             user = User.query.filter_by(id=session['user_id']).first()
             if user.admin: 
                logs = None
                if form.validate_on_submit():
                   user = User.query.filter_by(id=form.user_id.data).first()
                   logs = Log.query.filter_by(user_id=form.user_id.data).all()
                return render_template("login_history.html", form = form, logs = logs, user = user)
       
          return redirect(url_for('login'))
       
    1: @app.route("/history", defaults={"query":None}, methods = ['POST', 'GET'])
    1: @app.route("/history/<query>")
       def history(query):
          if 'user_id' in session:
             form = HistoryForm()
             user = User.query.filter_by(id=session['user_id']).first()     
             if query != None:
                submission_id = int(query.replace("query",""))
                #if user is admin, allow access to any submission by not filtering on user id
                if user.admin:
                   submission = Submission.query.filter_by(id=submission_id).first()   
                   user = User.query.filter_by(id=submission.user_id).first()
                else:
                   submission = Submission.query.filter_by(user_id=session['user_id'], id=submission_id).first()   
                if submission is None:
                   flash("Sorry, that submission doesn't exist", "failure")
                return render_template("submission.html", submission = submission, user = user)
             else:
                if user.admin and form.validate_on_submit():
                      submissions = Submission.query.join(User).filter_by(username=form.uname.data).all()
                      count = Submission.query.join(User).filter_by(username=form.uname.data).count()
                else:
                   submissions = Submission.query.filter_by(user_id=session['user_id']).all()
                   count = Submission.query.filter_by(user_id=session['user_id']).count()
                
                return render_template("history.html", submissions = submissions, count = count, user = user, form = form)
          else:
             return redirect(url_for('login'))         
       
    1: @app.route("/spell_check", methods = ['POST', 'GET'])
       def spell_check():
          if 'user_id' in session: 
             form = SpellForm()
             if form.validate_on_submit():
                text = form.inputtext.data
                #set textout field to be input text
                form.textout.data = form.inputtext.data
                form.inputtext.data = ""
                
                #define filename to include user_id and a random number
                user_id = session['user_id']
                filename = str(user_id)+'-'+str(random.randint(1, 1000))+'.txt'
       
                #create file and set output of check_words to misspelled input text
                with open(filename, 'w') as f:
                   f.write(str(text))
                   f.close()
                   if os.path.isfile(filename):
                      form.misspelled.data = check_words(filename)
                      os.remove(filename)
                      submission = Submission(user_id, text, form.misspelled.data)
                      db.session.add(submission)
                      db.session.commit() 
                   else:
                      print("Error: %s file not found" % filename)            
       
             return render_template("spell_check.html", form = form)
          else:
             return redirect(url_for('login'))
       
    1: @app.route('/register', methods = ['POST', 'GET'])
       def register():
          if 'user_id' in session: 
             return redirect(url_for('spell_check'))
       
          form = UserForm()
          # form_type is used to put a title on the html view and to set the form action (register or login)
          form_type = "Register"
       
          if request.method == "POST":
             if form.validate_on_submit():
                username = form.uname.data
                password = form.pword.data
                pin = form.pin.data
                admin = False
       
                if username != '' and password != '' and pin != '':
                   user = User.query.filter_by(username=username).first()
                   if user != None:
                      flash("Failure: Account already exists. Please login or select a different username.","success")
                      return redirect(url_for('login'))  
                   else:
                      user = User(username, password, pin, admin)
                      db.session.add(user)
                      db.session.commit()                     
                      flash("Success: Account registered!","success")
                      return redirect(url_for('login'))  
                else:
                   flash("Failure: Invalid account details. Please try again.","success")
             else:   
                flash("Failure: Please try again.","success")
       
          return render_template("form.html", type = form_type, form = form)
       
    1: @app.route('/login', methods = ['POST', 'GET'])
       def login():
          if 'user_id' in session: 
             return redirect(url_for('spell_check'))
          
          form = UserForm()
          # form_type is used to put a title on the html view and to set the form action (register or login)
          form_type = 'Login'
          if request.method == 'POST':
             if form.validate_on_submit():
                
                username = form.uname.data
                password = form.pword.data
                pin = form.pin.data
                
                user = User.query.filter_by(username=username).first()
       
                if user != None and check_password_hash(user.password,password):
                   if (pin == user.pin) or (pin == "" and user.pin is None):
                      session['user_id'] = user.id
                      session['admin'] = user.admin
                      log = Log(session['user_id'], datetime.datetime.now() , None)
                      db.session.add(log)
                      db.session.commit()
                      session['log_id'] = log.id
                      flash("Success: You are logged in!","result")
                      return redirect(url_for('spell_check'))                              
                   else:
                      flash("Two-factor failure. Please try again.","result")   
                else:
                   flash("Incorrect username or password. Please try again.","result")
             else:
                flash("Failure: Please try again.","result")
       
          return render_template("form.html", type = form_type, form = form)      
       
    1: @app.route('/logout')
       def logout():
          if 'log_id' in session:
             log = Log.query.filter_by(id=session['log_id']).first()
             log.logout = datetime.datetime.now()
             db.session.commit()
          session.clear()
          return redirect(url_for('login'))
       
    1: def check_words(filename):
          stdout = check_output(['./a.out',filename, 'wordlist.txt']).decode('utf-8').replace('\n',', ')[:-2]
          return stdout
       
    2: class LoginHistoryForm(FlaskForm):
    1:    user_id = IntegerField('User ID', validators=[InputRequired()], id='userid')
    1:    submit = SubmitField('Submit')
       
    2: class HistoryForm(FlaskForm):
    1:    uname = StringField('Username', validators=[InputRequired(), Regexp(r'^[\w.@+-]+$'), Length(min=4, max=25)], id='userquery')
    1:    submit = SubmitField('Submit')
          
    2: class UserForm(FlaskForm):
    1:    uname = StringField('Username', validators=[InputRequired(), Regexp(r'^[\w.@+-]+$'), Length(min=4, max=25)])
    1:    pword = PasswordField('Password', validators=[InputRequired()])
    1:    pin = IntegerField('Two-Factor Authentication', validators=[Optional(), NumberRange(min=1000000000,max=99999999999)], id='2fa')
    1:    submit = SubmitField('Submit')
       
    2: class SpellForm(FlaskForm):
    1:    inputtext = TextAreaField('Text', validators=[InputRequired()], id="inputtext", render_kw={"rows": 4, "cols": 100})
    1:    textout = TextAreaField('Text out', id="textout", render_kw={"disabled": "disabled", "rows": 4, "cols": 100})
    1:    misspelled = TextAreaField('Misspelled', id="misspelled", render_kw={"disabled": "disabled", "rows": 4, "cols": 100})
    1:    submit = SubmitField('Submit')
       
    1: if __name__ == '__app__':
          app().run(debug = True, host='0.0.0.0')
